use std::{thread, time};
use text_io::read;

struct Words {
    _1: String,
    _2: String,
    _3: String,
    _4: String,
    _5: String,
    _6: String,
    _7: String,
    _8: String,
    _1_q: String,
    _2_q: String,
    _3_q: String,
    _4_q: String,
    _5_q: String,
    _6_q: String,
    _7_q: String,
    _8_q: String,
}

fn main() {
    let _1 = String::from("–≤");
    let _2 = String::from("–µ");
    let _3 = String::from("–Ω");
    let _4 = String::from("—Ç");
    let _5 = String::from("–∏");
    let _6 = String::from("–ª");
    let _7 = String::from("—è");
    let _8 = String::from("—Ü");
    let _1_q = String::from("1");
    let _2_q = String::from("2");
    let _3_q = String::from("3");
    let _4_q = String::from("4");
    let _5_q = String::from("5");
    let _6_q = String::from("6");
    let _7_q = String::from("7");
    let _8_q = String::from("8");
    let mut game_words = Words {
        _1,
        _2,
        _3,
        _4,
        _5,
        _6,
        _7,
        _8,
        _1_q,
        _2_q,
        _3_q,
        _4_q,
        _5_q,
        _6_q,
        _7_q,
        _8_q,
    };
    println!("–ü—Ä–∏–≤–µ—Ç üëã\n–î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å?üòú");
    loop {
        let answer_friend: String = read!();
        match answer_friend.to_lowercase().as_str() {
            "ok" => break,
            "–æ–∫" => break,
            "–¥–∞–≤–∞–π" => break,
            "–Ω—É –¥–∞–≤–∞–π" => break,
            "–Ω—É–¥–∞–≤–∞–π" => break,
            "–æ–∫–µ–π" => break,
            "—Ö–æ—Ä–æ—à–æ" => break,
            "–Ω–µ—Ç" => println!("–ò —Ç–µ–±–µ —Å–æ–≤—Å–µ–º –Ω–µ —Ö–æ—á–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? üò•"),
            _ => println!("–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. üò•"),
        }
    }
    think(1);
    println!("–û—Ç–ª–∏–∏–∏–∏—á–Ω–æ.\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–∞—Ç–∞—Ä–∏–Ω –±–æ—Ç, –∞ —Ç–µ–±—è??ü§î");
    let name: String = read!();
    think(1);
    println!("üëã üëã üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {}!!! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.", name);
    think(2);
    println!("–Ø —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Å–ª—É—á–∞–π–Ω–æ —É–∑–Ω–∞–ª, —á—Ç–æ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –≠—Ç–æ –ø—Ä–∞–≤–¥–∞?");
    let yes_no: String = read!();
    match yes_no.to_lowercase().as_str() {
        "no" => {
            think(1);
            println!("–¢–æ–≥–¥–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á.");
            return;
        }
        "–Ω–µ—Ç" => {
            think(1);
            println!("–¢–æ–≥–¥–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á.");
            return;
        }
        "–Ω–µ–∞" => {
            think(1);
            println!("–¢–æ–≥–¥–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á.");
            return;
        }
        _ => {
            think(1);
            println!("–ö–∞–∫ —è —É–¥–∞—á–Ω–æ –∑–∞—à–µ–ª.");
        }
    }
    think(2);
    println!("–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —Å –º–µ–Ω—è –ø–æ–¥–∞—Ä–æ—á–µ–∫");
    think(2);
    println!("–¢–∞–∫–æ–≥–æ —Ö–≤–∞—Ç–∏—Ç??? --->  üéÅ ?");
    think(2);
    println!("–ë–æ—é—Å—å –Ω–µ—Ç");
    think(2);
    println!("–•–º–º–º–º....");
    think(3);
    println!("–ê –¢–∞–∫–æ–π...?");
    think(1);
    println!(
        "
                              !     !     !
   (          (    *         |V|   |V|   |V|        )   *   )       (
    )   *      )             | |   | |   | |        (       (   *    )
   (          (           (*******************)    *       *    )    *
   (     (    (           (    *         *    )               )    (
    )   * )    )          (   \\|/       \\|/   )         *    (      )
   (     (     *          (<<<<<<<<<*>>>>>>>>>)               )    (
    )     )        ((*******************************))       (  *   )
   (     (   *     ((         HAPPY BIRTHDAY!!!!    ))      * )    (
    ) *   )        ((   *    *   *    *    *    *   ))   *   (      )
   (     (         ((  \\|/  \\|/ \\|/  \\|/  \\|/  \\|/  ))        )    (
   *)     )        ((^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^))       (      )
   (     (   (**********************************************) )  * ("
    );
    think(2);
    println!("–ù–µ–µ–µ–µ, —Ç–æ –∂–µ –Ω–µ —Ç–æ");
    think(3);
    println!("–ü—Ä–∏–¥—É—É—É—É–º–∞–ª!!!! –£ –º–µ–Ω—è –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫.");
    think(2);
    println!("–ù–æ —á—Ç–æ –±—ã –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å, –ø—Ä–∏–¥–µ—Ç—Å—è.....");
    think(2);
    println!("–ü–æ–ø–æ—Ç–µ—Ç—å...");
    think(2);
    println!("if you know what i mean");
    think(3);
    println!("–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º.");
    rules(&mut game_words);
    loop {
        if check_words(&mut game_words) {
            break;
        }
        let next_char_number: String = read!();
        if !next_char_number.parse::<f64>().is_ok() {
            println!("–ù–∞–¥–æ –ø–∏—Å–∞—Ç—å —Ü–∏—Ñ–µ—Ä–∫—É, –∞ –Ω–µ –±—É–∫–æ–≤–∫—É :)")
        } else {
            match next_char_number.parse::<u8>().unwrap() {
                1 => {
                    _1_word(&mut game_words);
                    print_words(&mut game_words);
                }
                2 => {
                    _2_word(&mut game_words);
                    print_words(&mut game_words);
                }
                3 => {
                    _3_word(&mut game_words);
                    print_words(&mut game_words);
                }
                4 => {
                    _4_word(&mut game_words);
                    print_words(&mut game_words);
                }
                5 => {
                    _5_word(&mut game_words);
                    print_words(&mut game_words);
                }
                6 => {
                    _6_word(&mut game_words);
                    print_words(&mut game_words);
                }
                7 => {
                    _7_word(&mut game_words);
                    print_words(&mut game_words);
                }
                8 => {
                    _8_word(&mut game_words);
                    print_words(&mut game_words);
                }
                0 => {
                    rules(&mut game_words);
                }
                _ => {
                    println!(
                        "–ö–∞–∂–µ—Ç—Å—è –Ω–æ–º–µ—Ä–∞ —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç—É.\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞, –≤–≤–µ–¥–∏ 0"
                    );
                    print_words(&mut game_words);
                }
            }
        }
    }
    think(2);
    println!(
        "{}, —Ç—ã –º–æ–ª–æ–¥–µ—Ü. –ù–∞—à–µ —Å–ª–æ–≤–æ –í–ï–ù–¢–ò–õ–Ø–¶–ò–Ø.\n–≠—Ç–æ –±—ã–ª–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ, –Ω–æ –µ—â–µ –Ω–µ –∫–æ–Ω–µ—Ü",
        name
    );
    think(2);
    println!("–î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –≤–º–µ—Å—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–π –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ (–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –Ω–µ —Å—á–∏—Ç–∞–µ–º)????");
    loop {
        let count_vent = read!();
        match count_vent {
            3 => {
                println!("–û—Ç–ª–∏–∏–∏–∏—á–Ω–æ. –ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—É—é (—Ç–æ–ª—å–∫–æ –Ω–µ –ª–æ–º–∞–π) –∏ —Ç—ã –Ω–∞–π–¥–µ—à—å —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. üé• ");
                break;
            }
            _ => println!("–ü–æ–¥—É–º–∞–π –µ—â–µ"),
        }
    }
    println!("–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è, —Å –ª—é–±–æ–≤—å—é, —Ç–≤–æ–π —Ç–∞—Ç–∞—Ä–∏–Ω.üòò üòò üòò");
}

fn think(sec: u64) {
    let time_to_answer = time::Duration::from_secs(sec);
    thread::sleep(time_to_answer);
}

fn rules(game_words: &mut Words) {
    think(3);
    println!("###################################################");
    println!("#######______________________________________######");
    println!("#######_____________–ü–†–ê–í–ò–õ–ê__________________######");
    println!("#######______________________________________######");
    println!("###################################################");
    think(3);
    println!("–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–ª–æ–≤–æ –∏–∑ 10 –±—É–∫–≤");
    println!(
        "[{}][{}][{}][{}][{}][{}][{}][{}][{}][{}]",
        game_words._1_q,
        game_words._2_q,
        game_words._3_q,
        game_words._4_q,
        game_words._5_q,
        game_words._6_q,
        game_words._7_q,
        game_words._8_q,
        game_words._7_q,
        game_words._8_q,
    );
    think(4);
    println!("–ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –Ω—É–∂–Ω–æ –æ—Ç–≥–∞–¥–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ");
    think(3);
    println!();
    println!("–ö–∞–∂–¥–∞—è –±—É–∫–≤–∞ —Ç–∞–∏—Ç –≤ —Å–µ–±–µ –∑–∞–≥–∞–¥–∫—É,\n–≤–≤–æ–¥–∏ –Ω–æ–º–µ—Ä –±—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–≥–∞–¥–∞—Ç—å.\n–ñ–µ–ª–∞—é —É–¥–∞—á–∏.");
    think(5);
    println!();
    println!("__________________________________________________________");
    println!("P.S. –ù—É–º–µ—Ä–∞—Ü–∏—è –Ω–µ –æ—à–∏–±–æ—á–Ω–∞—è) –ë—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è.\n–û—Ç–≥–∞–¥–∞–µ—à—å –æ–¥–Ω—É –∏–∑ –±—É–∫–≤, –æ—Ç–∫—Ä–æ—é—Ç—Å—è –≤—Å–µ —Ç–∞–∫–∏–µ –∂–µ,\n–ø—Ä—è–º –∫–∞–∫ –≤ –ü–æ–ª–µ –ß—É–¥–µ—Å");
    println!("__________________________________________________________");
    think(5);
    println!("–ü–æ–µ—Ö–∞–ª–∏. –Ø –ñ–¥—É –Ω–æ–º–µ—Ä –±—É–∫–≤—ã üëá");
}

fn _1_word(game_words: &mut Words) {
    let sudoku_url = "https://sudoku.bestcrosswords.ru/generator?id=7368&level=3";
    let sudoku_game = "\n
---------------------------------------------------
    –°–£–î–û–ö–£
    -------------------------------
    |[ ][ ][6]|[ ][4][ ]|[ ][ ][1]|
    |[ ][5][9]|[ ][ ][6]|[ ][3][ ]|
    |[ ][ ][ ]|[ ][9][7]|[5][ ][8]|
    |---------|---------|---------|
    |[ ][ ][ ]|[ ][ ][1]|[8][7][ ]|
    |[ ][4][1]|[ ][7][ ]|[2][ ][ ]|
    |[ ][8][ ]|[ ][ ][ ]|[3][ ][4]|
    |---------|---------|---------|
    |[ ][ ][3]|[1][8][4]|[7][ ][ ]|
    |[5][ ][ ]|[ ][ ][3]|[ ][4][2]|
    |[ ][7][ ]|[ ][2][ ]|[ ][8][ ]|
    -------------------------------
----------------------------------------------------
    \n";
    println!("{}", sudoku_game);
    think(2);
    println!("–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –∏–≥—Ä–∞ —Å—É–¥–æ–∫—É.");
    think(2);
    println!("–ó–∞–¥–∞—á–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è. –ù–∞–π–¥–∏ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ (—Å –≤–µ—Ä—Ö–µ–≥–æ –ª–µ–≤–æ–≥–æ –¥–æ –Ω–∏–∂–Ω–µ–≥–æ –ø—Ä–∞–≤–æ–≥–æ —É–≥–ª–∞)\n–∏ –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –º–Ω–µ. –ú–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–∏—Å—Ç–æ—á–∫–æ–º.");
    let mut count = 0;
    loop {
        let answer = read!();
        match answer {
            41 => {
                println!("‚úÖ –£–º–Ω–∏—Ü–∞. –í—Å–µ –≤–µ—Ä–Ω–æ.");
                println!();
                game_words._1_q = String::from(game_words._1.as_str());
                think(3);
                println!(
                    "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –±—É–∫–≤–µ. –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –±—É–∫–≤—ã üëá –∏ –æ—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É."
                );
                break;
            }
            _ => {
                println!("‚ùå –ü–æ–¥—É–º–∞–π –µ—â–µ");
                count += 1;
                if count > 3 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É. {}", sudoku_url);
                }
            }
        }
    }
}
fn _2_word(game_words: &mut Words) {
    println!("–ó–∞–¥–∞—á–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è, –æ—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É.");
    think(3);
    println!("–ö–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –æ—Ç—Ü–∞ —Ç–≤–æ–µ–≥–æ —Ç–∞—Ç–∞—Ä–∏–Ω–∞?");
    let mut count = 0;
    loop {
        let answer = read!();
        match answer {
            26 => {
                println!("‚úÖ –£–º–Ω–∏—Ü–∞. –í—Å–µ –≤–µ—Ä–Ω–æ.");
                think(3);
                game_words._2_q = String::from(game_words._2.as_str());
                println!(
                    "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –±—É–∫–≤–µ. –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –±—É–∫–≤—ã üëá –∏ –æ—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É."
                );
                break;
            }
            _ => {
                println!("‚ùå –ü–æ–¥—É–º–∞–π –µ—â–µ");
                count += 1;
                if count == 3 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, —ç—Ç–æ –∏—é–ª—å –º–µ—Å—è—Ü");
                } else if count == 5 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, —ç—Ç–æ —á–∏—Å–ª–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —á–∏—Å–ª–∞ –î–† —Ç–∞—Ç–∞—Ä–∏–Ω–∞");
                } else if count == 6 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, 24 —Å–µ–Ω—Ç—è–±—Ä—è + –¥–≤–∞ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥");
                }
            }
        }
    }
}
fn _3_word(game_words: &mut Words) {
    println!("–ó–∞–¥–∞—á–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è, –æ—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É.");
    println!("üßë‚ÄçüöÄ –ß—Ç–æ –Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å –≤ –∫–æ—Å–º–æ—Å–µ?");
    let mut count = 0;
    loop {
        let answer: String = read!();
        match answer.to_lowercase().as_str() {
            "–ø–æ–≤–µ—Å–∏—Ç—å—Å—è" => {
                println!("‚úÖ –£–º–Ω–∏—Ü–∞. –í—Å–µ –≤–µ—Ä–Ω–æ.");
                game_words._3_q = String::from(game_words._3.as_str());
                println!(
                    "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –±—É–∫–≤–µ. –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –±—É–∫–≤—ã üëá –∏ –æ—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É."
                );
                break;
            }
            _ => {
                println!("‚ùå –ü–æ–¥—É–º–∞–π –µ—â–µ");
                count += 1;
                if count == 3 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, –≤ —ç—Ç–æ–º —É—á–∞–≤—Å—Ç–≤—É–µ—Ç –≤–µ—Ä–µ–≤–∫–∞");
                } else if count == 5 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, –≤ —ç—Ç–æ–º –µ—â–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç —Å—Ç—É–ª");
                } else if count == 6 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, —Ç—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º—ã–ª–æ");
                }
            }
        }
    }
}
fn _4_word(game_words: &mut Words) {
    println!("–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–Ω–µ–º, —Å–¥–µ–ª–∞–π 15 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π.\n–¢–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –±–µ–∑ —ç—Ç–æ–≥–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–π–¥–µ—Ç,\n–∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'");
    let answer: String = read!();
    game_words._4_q = String::from(game_words._4.as_str());
    println!("–£—Å—Ç–∞–ª–∞?");
    think(1);
    println!("–≠—Ç–æ –±—ã–ª–æ –≤—Å–µ –∑–∞–¥–∞–Ω–∏–µ üòÜ üòÜ üòÜ");
    think(2);
    println!("–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –±—É–∫–≤–µ. –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –±—É–∫–≤—ã üëá –∏ –æ—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É.");
}
fn _5_word(game_words: &mut Words) {
    println!("–ó–∞–¥–∞—á–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è, –æ—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É. üïµ");
    think(3);
    println!(
        "
    -----------------------------------------------
    –í –ø–µ—Ä–µ—Ä—ã–≤–µ –≤ –∫–ª–∞—Å—Å–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –¥–µ–≤—è—Ç—å —É—á–µ–Ω–∏–∫–æ–≤.
    –û–¥–∏–Ω –∏–∑ –Ω–∏—Ö —Ä–∞–∑–±–∏–ª –æ–∫–Ω–æ.
    –ù–∞ –≤–æ–ø—Ä–æ—Å —É—á–∏—Ç–µ–ª—è –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã:

        - –Ø–∫–æ–±. –≠—Ç–æ —Å–¥–µ–ª–∞–ª –î–∂–µ–∫.
        - –ë–æ–±. –≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–¥–∞.
        - –ú–∞—Ä–∏—è. –Ø –µ–≥–æ —Ä–∞–∑–±–∏–ª–∞.
        - –î–∂–æ–Ω. –°–¥–µ–ª–∞–ª–∞ —ç—Ç–æ –ª–∏–±–æ –ú–∞—Ä–∏—è, –ª–∏–±–æ –ê–Ω–Ω–∞.
        - –î–∂–µ–∫. –ë–æ–± –ª–∂–µ—Ç.
        - –¢–æ–º. –≠—Ç–æ –±—ã–ª–∞ –ú–∞—Ä–∏—è.
        - –õ–µ–æ. –ù–µ—Ç. –ú–∞—Ä–∏—è –æ–∫–Ω–æ –Ω–µ —Ä–∞–∑–±–∏–≤–∞–ª–∞.
        - –ê–Ω–Ω–∞. –ù–∏ –ú–∞—Ä–∏—è, –Ω–∏ —è —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏.
        - –†–æ–∑–∞–ª–∏—è. –ê–Ω–Ω–∞ –ø—Ä–∞–≤–∞, –Ω–æ –î–∂–µ–∫ —Ç–∞–∫–∂–µ –Ω–µ –≤–∏–Ω–æ–≤–µ–Ω.

    –ï—Å–ª–∏ –∏–∑ —ç—Ç–∏—Ö –¥–µ–≤—è—Ç–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π —Ç—Ä–∏, –∏ —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ –∏—Å—Ç–∏–Ω–Ω—ã, –∫—Ç–æ —Ä–∞–∑–±–∏–ª –æ–∫–Ω–æ?üïµ üïµ üïµ
    -------------------------------------------------"
    );
    let mut count = 0;
    loop {
        let answer: String = read!();
        match answer.to_lowercase().as_str() {
            "–∞–Ω–Ω–∞" => {
                println!("‚úÖ –£–º–Ω–∏—Ü–∞. –í—Å–µ –≤–µ—Ä–Ω–æ.");
                game_words._5_q = String::from(game_words._5.as_str());
                println!(
                    "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –±—É–∫–≤–µ. –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –±—É–∫–≤—ã üëá –∏ –æ—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É."
                );
                break;
            }
            _ => {
                println!("‚ùå –ü–æ–¥—É–º–∞–π –µ—â–µ");
                count += 1;
                if count == 3 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, —ç—Ç–æ –¥–µ–≤–æ—á–∫–∞");
                } else if count == 5 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, –¥–µ–≤–æ—á–∫–∞ —Å —Å–∞–º—ã–º –º–∞–ª–µ–Ω—å–∫–∏–º –∫–æ–ª-–≤–æ–º –±—É–∫–≤ –≤ –∏–º–µ–Ω–∏");
                }
            }
        }
    }
}
fn _6_word(game_words: &mut Words) {
    println!("–ó–∞–¥–∞—á–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è. –û—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É.");
    println!(
        "
    –°–ø—É—Ç–Ω–∏—Ü–∞ —Å–∞–º—ã—Ö –ø–µ—Ä–≤—ã—Ö –¥–Ω–µ–π,
    –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏—Ö–æ–¥–∏–º –º—ã –∫ –Ω–µ–π;
    –í –æ—á–µ–Ω—å –¥–∞–≤–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞
    –ù–µ–ª–µ–≥–∫–æ —Å–æ–≥—Ä–µ–≤–∞–ª–∞—Å—å –æ–Ω–∞."
    );
    println!();
    let mut count = 0;
    loop {
        let answer: String = read!();
        match answer.to_lowercase().as_str() {
            "–∫—Ä–æ–≤–∞—Ç—å" => {
                println!("‚úÖ –£–º–Ω–∏—Ü–∞. –í—Å–µ –≤–µ—Ä–Ω–æ.");
                game_words._6_q = String::from(game_words._6.as_str());
                println!(
                    "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –±—É–∫–≤–µ. –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –±—É–∫–≤—ã üëá –∏ –æ—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É."
                );
                break;
            }
            _ => {
                println!("‚ùå –ü–æ–¥—É–º–∞–π –µ—â–µ");
                count += 1;
                if count == 3 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, —è –≤—Å–µ–≥–¥–∞ –ª—é–±–ª—é —á—Ç–æ –±—ã –æ–Ω–∞ –±—ã–ª–∞ —É–±—Ä–∞–Ω–∞");
                } else if count == 5 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, –Ω–∞ –Ω–µ–π –ª–µ–∂–∞—Ç –ø–æ–¥—É—à–∫–∏");
                } else if count == 6 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, –Ω–∞ –Ω–µ–π —Å–ø—è—Ç");
                }
            }
        }
    }
}
fn _7_word(game_words: &mut Words) {
    println!("–ó–∞–¥–∞—á–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è. –û—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É.");
    println!(
        "
    ‚Äì –û–Ω–∞ –∫—Ä–∞—Å–Ω–∞—è?
    ‚Äì –ù–µ—Ç, —á–µ—Ä–Ω–∞—è.
    ‚Äì –ê –ø–æ—á–µ–º—É –æ–Ω–∞ —Å–µ–π—á–∞—Å –±–µ–ª–∞—è?
    ‚Äì –ü–æ—Ç–æ–º—É, —á—Ç–æ –µ—â–µ –∑–µ–ª–µ–Ω–∞—è.

    –û —á–µ–º —Ä–µ—á—å?"
    );
    let mut count = 0;
    loop {
        let answer: String = read!();
        match answer.to_lowercase().as_str() {
            "—Å–º–æ—Ä–æ–¥–∏–Ω–∞" => {
                println!("‚úÖ –£–º–Ω–∏—Ü–∞. –í—Å–µ –≤–µ—Ä–Ω–æ.");
                game_words._7_q = String::from(game_words._7.as_str());
                println!(
                    "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –±—É–∫–≤–µ. –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –±—É–∫–≤—ã üëá –∏ –æ—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É."
                );
                break;
            }
            _ => {
                println!("‚ùå –ü–æ–¥—É–º–∞–π –µ—â–µ");
                count += 1;
                if count == 3 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, —ç—Ç–æ —è–≥–æ–¥–∞");
                } else if count == 5 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, —è–≥–æ–¥–∞ —Ä–∞—Å—Ç–µ—Ç –≤ –ø–æ–¥–ª–µ—Å–Ω–æ–º");
                } else if count == 6 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, –∫–∞–∫ –≤–∏–Ω–æ–≥—Ä–∞–¥, —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è —è–≥–æ–¥–∞");
                }
            }
        }
    }
}
fn _8_word(game_words: &mut Words) {
    println!("–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∫–∞.\n–ü—Ä–∏–¥–µ—Ç—Å—è –ø–æ–ø–æ—Ç–µ—Ç—å.");
    think(2);
    println!("–ò–º–µ–µ–º –ø–∞—Ä–∫–æ–≤–∫—É —Å –Ω–æ–º–µ—Ä–∞–º–∏");
    println!();
    println!(
        "
    |    |    |    |    |    |    |
    |    |    |    |    |    |    |
    | 16 | 06 | 68 | 88 | üöó  | 98 |
    |____|____|____|____|____|____|
    "
    );
    think(3);
    println!("–ö–∞–∫–∞—è —Ü–∏—Ñ—Ä–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º?");
    let mut count = 0;
    loop {
        let answer = read!();
        match answer {
            87 => {
                println!("‚úÖ –£–º–Ω–∏—Ü–∞. –í—Å–µ –≤–µ—Ä–Ω–æ.");
                game_words._8_q = String::from(game_words._8.as_str());
                println!(
                    "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –±—É–∫–≤–µ. –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –±—É–∫–≤—ã üëá –∏ –æ—Ç–≥–∞–¥–∞–π –∑–∞–≥–∞–¥–∫—É."
                );
                break;
            }
            _ => {
                println!("‚ùå –ü–æ–¥—É–º–∞–π –µ—â–µ");
                count += 1;
                if count == 3 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, —Ü–∏—Ñ—Ä—ã –æ–∑–Ω–∞—á–∞—é—Ç –Ω–µ —Ç–æ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å");
                } else if count == 5 {
                    println!("–î–∞—é —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∫—É, —Ü–∏—Ñ—Ä—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã");
                }
            }
        }
    }
}

fn check_words(game_words: &mut Words) -> bool {
    if game_words._1 == game_words._1_q
        && game_words._2 == game_words._2_q
        && game_words._3 == game_words._3_q
        && game_words._4 == game_words._4_q
        && game_words._5 == game_words._5_q
        && game_words._6 == game_words._6_q
        && game_words._7 == game_words._7_q
        && game_words._8 == game_words._8_q
    {
        return true;
    }
    return false;
}

fn print_words(game_words: &mut Words) {
    println!(
        "[{}][{}][{}][{}][{}][{}][{}][{}][{}][{}]",
        game_words._1_q,
        game_words._2_q,
        game_words._3_q,
        game_words._4_q,
        game_words._5_q,
        game_words._6_q,
        game_words._7_q,
        game_words._8_q,
        game_words._5_q,
        game_words._7_q,
    );
}
